package dev.realme.ash.impl.module.exploit;

import dev.realme.ash.api.config.Config;
import dev.realme.ash.api.config.setting.EnumConfig;
import dev.realme.ash.api.event.listener.EventListener;
import dev.realme.ash.api.module.ModuleCategory;
import dev.realme.ash.api.module.ToggleModule;
import dev.realme.ash.impl.event.item.TridentWaterEvent;
import dev.realme.ash.impl.event.network.PlayerTickEvent;
import dev.realme.ash.init.Managers;
import dev.realme.ash.util.player.InventoryUtil;
import dev.realme.ash.util.string.EnumFormatter;
import net.minecraft.enchantment.EnchantmentHelper;
import net.minecraft.item.ItemStack;
import net.minecraft.item.TridentItem;
import net.minecraft.network.packet.c2s.play.PlayerActionC2SPacket;
import net.minecraft.network.packet.c2s.play.PlayerInteractItemC2SPacket;
import net.minecraft.util.Hand;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.Direction;

public class DisablerModule
extends ToggleModule {
    Config<Mode> modeConfig = new EnumConfig("Mode", "The mode for disabling anticheat checks", (Enum)Mode.GRIM_TRIDENT, (Enum[])Mode.values());

    public DisablerModule() {
        super("Disabler", "Disables anticheat checks", ModuleCategory.EXPLOITS);
    }

    @Override
    public String getModuleData() {
        return this.modeConfig.getValue() == Mode.GRIM_TRIDENT ? "Grim" : EnumFormatter.formatEnum(this.modeConfig.getValue());
    }

    @EventListener
    public void onPlayerTick(PlayerTickEvent event) {
        if (this.modeConfig.getValue() == Mode.GRIM_TRIDENT) {
            if (DisablerModule.mc.player.isUsingItem()) {
                return;
            }
            int tridentSlot = -1;
            for (int i = 0; i < 9; ++i) {
                ItemStack stack = DisablerModule.mc.player.getInventory().getStack(i);
                if (stack.isEmpty() || !(stack.getItem() instanceof TridentItem) || EnchantmentHelper.getRiptide(stack) <= 0) continue;
                tridentSlot = i;
                break;
            }
            if (tridentSlot == -1) {
                return;
            }
            int oldSlot = DisablerModule.mc.player.getInventory().selectedSlot;
            InventoryUtil.doSwap(tridentSlot);
            Managers.NETWORK.sendSequencedPacket(id -> new PlayerInteractItemC2SPacket(Hand.MAIN_HAND, id));
            Managers.NETWORK.sendPacket(new PlayerActionC2SPacket(PlayerActionC2SPacket.Action.RELEASE_USE_ITEM, BlockPos.ORIGIN, Direction.DOWN));
            InventoryUtil.doSwap(oldSlot);
        }
    }

    @EventListener
    public void onTridentWaterCheck(TridentWaterEvent event) {
        if (this.modeConfig.getValue().equals((Object)Mode.GRIM_TRIDENT)) {
            event.cancel();
        }
    }

    private static enum Mode {
        GRIM_TRIDENT;

    }
}
