package dev.realme.ash.impl.module.exploit;

import dev.realme.ash.api.event.EventStage;
import dev.realme.ash.api.event.listener.EventListener;
import dev.realme.ash.api.module.ModuleCategory;
import dev.realme.ash.api.module.ToggleModule;
import dev.realme.ash.api.render.RenderManager;
import dev.realme.ash.impl.event.TickEvent;
import dev.realme.ash.impl.event.network.PacketEvent;
import dev.realme.ash.impl.event.render.RenderWorldEvent;
import dev.realme.ash.init.Modules;
import net.minecraft.entity.player.PlayerEntity;
import net.minecraft.item.ChorusFruitItem;
import net.minecraft.item.ItemStack;
import net.minecraft.network.packet.Packet;
import net.minecraft.network.packet.c2s.play.PlayerMoveC2SPacket;
import net.minecraft.network.packet.c2s.play.TeleportConfirmC2SPacket;
import net.minecraft.network.packet.s2c.play.PlayerPositionLookS2CPacket;
import net.minecraft.util.math.Box;
import net.minecraft.util.math.Vec3d;

public class ChorusControlModule
extends ToggleModule {
    private boolean cancelChorusTeleport;
    private int chorusTeleportId;
    private PlayerPositionLookS2CPacket teleportPacket;

    public ChorusControlModule() {
        super("ChorusControl", "Allows player to control chorus teleports", ModuleCategory.EXPLOITS);
    }

    @Override
    public void onDisable() {
        if (mc.getNetworkHandler() != null && this.teleportPacket != null) {
            mc.getNetworkHandler().onPlayerPositionLook(this.teleportPacket);
        }
        this.teleportPacket = null;
        this.cancelChorusTeleport = false;
    }

    @EventListener
    public void onPacketOutbound(PacketEvent.Send event) {
        if (this.cancelChorusTeleport) {
            PlayerMoveC2SPacket packet;
            Packet<?> packet2 = event.getPacket();
            if (packet2 instanceof PlayerMoveC2SPacket && (packet = (PlayerMoveC2SPacket) packet2).changesPosition()) {
                event.cancel();
            } else {
                packet2 = event.getPacket();
                if (packet2 instanceof TeleportConfirmC2SPacket packet3) {
                    event.cancel();
                    this.chorusTeleportId = packet3.getTeleportId();
                }
            }
        }
    }

    @EventListener
    public void onPacketInbound(PacketEvent.Receive event) {
        Packet<?> packet = event.getPacket();
        if (packet instanceof PlayerPositionLookS2CPacket) {
            PlayerPositionLookS2CPacket packet2 = (PlayerPositionLookS2CPacket) packet;
            if (this.cancelChorusTeleport) {
                event.cancel();
                this.teleportPacket = packet2;
            }
        }
    }

    @EventListener
    public void onTick(TickEvent event) {
        ItemStack stack;
        if (event.getStage() != EventStage.PRE) {
            return;
        }
        if (!this.cancelChorusTeleport && ChorusControlModule.mc.player.isUsingItem() && (stack = ChorusControlModule.mc.player.getStackInHand(ChorusControlModule.mc.player.getActiveHand())).getItem() instanceof ChorusFruitItem && stack.getMaxUseTime() - ChorusControlModule.mc.player.getItemUseTime() <= 1) {
            this.cancelChorusTeleport = true;
        }
    }

    @EventListener
    public void onRenderWorld(RenderWorldEvent event) {
        if (this.teleportPacket != null) {
            Vec3d vec3d = new Vec3d(this.teleportPacket.getX(), this.teleportPacket.getY(), this.teleportPacket.getZ());
            Box teleportBox = PlayerEntity.STANDING_DIMENSIONS.getBoxAt(vec3d);
            RenderManager.renderBox(event.getMatrices(), teleportBox, Modules.CLIENT_SETTING.getRGB(60));
            RenderManager.renderBoundingBox(event.getMatrices(), teleportBox, 1.5f, Modules.CLIENT_SETTING.getRGB(145));
        }
    }
}
