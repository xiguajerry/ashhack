package dev.realme.ash.impl.module.exploit;

import dev.realme.ash.api.config.Config;
import dev.realme.ash.api.config.setting.BooleanConfig;
import dev.realme.ash.api.config.setting.NumberConfig;
import dev.realme.ash.api.event.listener.EventListener;
import dev.realme.ash.api.module.ModuleCategory;
import dev.realme.ash.api.module.ToggleModule;
import dev.realme.ash.impl.event.RunTickEvent;
import dev.realme.ash.impl.event.network.PacketEvent;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;
import net.minecraft.network.packet.Packet;
import net.minecraft.network.packet.c2s.common.CommonPongC2SPacket;
import net.minecraft.network.packet.c2s.common.KeepAliveC2SPacket;
import net.minecraft.network.packet.c2s.common.ResourcePackStatusC2SPacket;

public class FakeLatencyModule
extends ToggleModule {
    Config<Float> latencyConfig = new NumberConfig<Float>("Latency", "Delay in ms to add to the client ping", 10.0f, 1337.0f, 5000.0f);
    Config<Boolean> transactionsConfig = new BooleanConfig("Transactions", "Handle server transaction packets", false);
    private final ConcurrentMap<Packet<?>, Long> cachedPackets = new ConcurrentHashMap();

    public FakeLatencyModule() {
        super("FakeLatency", "Spoofs packet delays to make it appear to the server that you have a higher latency", ModuleCategory.EXPLOITS);
    }

    @Override
    public void onDisable() {
        if (FakeLatencyModule.mc.player == null) {
            return;
        }
        if (!this.cachedPackets.isEmpty()) {
            this.cachedPackets.forEach((packet, time) -> FakeLatencyModule.mc.player.networkHandler.sendPacket(packet));
            this.cachedPackets.clear();
        }
    }

    @EventListener
    public void onPacketOutbound(PacketEvent.Send event) {
        if (FakeLatencyModule.mc.player == null) {
            return;
        }
        if (!mc.isInSingleplayer() && (event.getPacket() instanceof KeepAliveC2SPacket || (event.getPacket() instanceof ResourcePackStatusC2SPacket || event.getPacket() instanceof CommonPongC2SPacket) && this.transactionsConfig.getValue().booleanValue())) {
            if (this.cachedPackets.containsKey(event.getPacket())) {
                this.cachedPackets.remove(event.getPacket());
                return;
            }
            this.cachedPackets.put(event.getPacket(), System.currentTimeMillis());
            event.cancel();
        }
    }

    @EventListener
    public void onTick(RunTickEvent event) {
        if (FakeLatencyModule.mc.player == null) {
            return;
        }
        this.cachedPackets.forEach((packet, time) -> {
            long elapsed = System.currentTimeMillis() - time;
            if ((float)elapsed > this.latencyConfig.getValue().floatValue()) {
                FakeLatencyModule.mc.player.networkHandler.sendPacket(packet);
                this.cachedPackets.remove(packet);
            }
        });
    }
}
