package dev.realme.ash.impl.module.exploit;

import dev.realme.ash.api.event.listener.EventListener;
import dev.realme.ash.api.module.ModuleCategory;
import dev.realme.ash.api.module.ToggleModule;
import dev.realme.ash.impl.event.TickEvent;
import dev.realme.ash.impl.event.network.DisconnectEvent;
import dev.realme.ash.impl.event.network.PacketEvent;
import dev.realme.ash.init.Managers;
import dev.realme.ash.util.math.timer.CacheTimer;
import dev.realme.ash.util.math.timer.Timer;
import net.minecraft.network.packet.Packet;
import net.minecraft.network.packet.c2s.play.RequestCommandCompletionsC2SPacket;
import net.minecraft.network.packet.s2c.play.CommandSuggestionsS2CPacket;

public class FastLatencyModule
extends ToggleModule {
    private long requestTime;
    private long latency;
    private final Timer lastRequest = new CacheTimer();
    private final Timer requestTimer = new CacheTimer();

    public FastLatencyModule() {
        super("FastLatency", "Calculates server ping", ModuleCategory.EXPLOITS);
    }

    @Override
    public String getModuleData() {
        return String.format("%dms", this.latency);
    }

    @EventListener
    public void onDisconnect(DisconnectEvent event) {
        this.latency = 0L;
        this.requestTime = 0L;
    }

    @EventListener
    public void onTick(TickEvent event) {
        if (FastLatencyModule.nullCheck()) {
            return;
        }
        if (this.lastRequest.passed(5000) && this.requestTimer.passed(500)) {
            Managers.NETWORK.sendPacket(new RequestCommandCompletionsC2SPacket(1000, "w "));
            this.requestTimer.reset();
            this.lastRequest.reset();
            this.requestTime = System.currentTimeMillis();
        }
    }

    @EventListener
    public void onPacketInbound(PacketEvent.Receive event) {
        CommandSuggestionsS2CPacket packet;
        if (FastLatencyModule.nullCheck()) {
            return;
        }
        Packet<?> packet2 = event.getPacket();
        if (packet2 instanceof CommandSuggestionsS2CPacket && (packet = (CommandSuggestionsS2CPacket) packet2).getCompletionId() == 1000) {
            this.latency = System.currentTimeMillis() - this.requestTime;
            this.lastRequest.setElapsedTime(-255L);
        }
    }

    public long getLatency() {
        return this.latency;
    }
}
