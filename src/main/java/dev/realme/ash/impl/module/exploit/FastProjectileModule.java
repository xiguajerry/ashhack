// Decompiled with: FernFlower
// Class Version: 17
package dev.realme.ash.impl.module.exploit;

import dev.realme.ash.api.config.Config;
import dev.realme.ash.api.config.setting.BooleanConfig;
import dev.realme.ash.api.config.setting.NumberConfig;
import dev.realme.ash.api.event.listener.EventListener;
import dev.realme.ash.api.module.ModuleCategory;
import dev.realme.ash.api.module.ToggleModule;
import dev.realme.ash.impl.event.network.PacketEvent;
import dev.realme.ash.init.Managers;
import dev.realme.ash.util.math.timer.CacheTimer;
import dev.realme.ash.util.math.timer.Timer;
import java.text.DecimalFormat;
import net.minecraft.item.ItemStack;
import net.minecraft.item.Items;
import net.minecraft.network.packet.Packet;
import net.minecraft.network.packet.c2s.play.ClientCommandC2SPacket;
import net.minecraft.network.packet.c2s.play.PlayerActionC2SPacket;
import net.minecraft.network.packet.c2s.play.PlayerInteractItemC2SPacket;
import net.minecraft.network.packet.c2s.play.ClientCommandC2SPacket.Mode;
import net.minecraft.network.packet.c2s.play.PlayerActionC2SPacket.Action;
import net.minecraft.network.packet.c2s.play.PlayerMoveC2SPacket.PositionAndOnGround;

public class FastProjectileModule extends ToggleModule {
    Config<Float> chargeConfig = new NumberConfig("Charge", "Time to charge after applying fast projectiles", 1.0F, 2.0F, 5.0F);
    Config<Boolean> arrowConfig = new BooleanConfig("Arrow", "Applies to arrows shot from a bow", true);
    Config<Boolean> potionConfig = new BooleanConfig("Potion", "Applies to splash/lingering potions", false);
    Config<Boolean> pearlConfig = new BooleanConfig("EnderPearl", "Applies to ender pearls", false);
    Config<Boolean> snowballConfig = new BooleanConfig("Snowball", "Applies to snowball", false);
    Config<Boolean> eggConfig = new BooleanConfig("Egg", "Applies to eggs", false);
    private final Timer chargeTimer = new CacheTimer();

    public FastProjectileModule() {
        super("FastProjectile", "Allows projectiles to travel at absurd speeds", ModuleCategory.EXPLOITS);
    }

    public String getModuleData() {
        if (this.chargeTimer.passed(this.chargeConfig.getValue() * 1000.0F)) {
            return "Charged";
        } else {
            DecimalFormat decimal = new DecimalFormat("0.0");
            return decimal.format((double)((2000.0F - (float)this.chargeTimer.getElapsedTime()) / 1000.0F)) + "s";
        }
    }

    @EventListener
    public void onPacketOutbound(PacketEvent.Send event) {
        if (mc.player != null) {
            if (this.chargeTimer.passed(this.chargeConfig.getValue() * 1000.0F)) {
                Packet packet = event.getPacket();
                if (packet instanceof PlayerInteractItemC2SPacket) {
                    PlayerInteractItemC2SPacket packet1 = (PlayerInteractItemC2SPacket)packet;
                    ItemStack stack = mc.player.getStackInHand(packet1.getHand());
                    if ((stack.getItem() == Items.SPLASH_POTION || stack.getItem() == Items.LINGERING_POTION) && this.potionConfig.getValue() || stack.getItem() == Items.ENDER_PEARL && this.pearlConfig.getValue() || stack.getItem() == Items.SNOWBALL && this.snowballConfig.getValue() || stack.getItem() == Items.EGG && this.eggConfig.getValue()) {
                        this.chargeTimer.reset();
                        this.spoofProjectileVelocity();
                    }
                } else {
                    packet = event.getPacket();
                    if (packet instanceof PlayerActionC2SPacket) {
                        PlayerActionC2SPacket packet1 = (PlayerActionC2SPacket)packet;
                        if (packet1.getAction() == Action.RELEASE_USE_ITEM) {
                            ItemStack stack = mc.player.getMainHandStack();
                            if (stack.getItem() == Items.BOW && this.arrowConfig.getValue()) {
                                this.chargeTimer.reset();
                                this.spoofProjectileVelocity();
                            }
                        }
                    }
                }

            }
        }
    }

    private void spoofProjectileVelocity() {
        double x = mc.player.getX();
        double y = mc.player.getY();
        double z = mc.player.getZ();
        Managers.NETWORK.sendPacket(new ClientCommandC2SPacket(mc.player, Mode.START_SPRINTING));

        for(int i = 0; i < 100; ++i) {
            Managers.NETWORK.sendPacket(new PositionAndOnGround(x, y - 1.0E-1D, z, true));
            Managers.NETWORK.sendPacket(new PositionAndOnGround(x, y + 1.0E-1D, z, false));
        }

    }
}
