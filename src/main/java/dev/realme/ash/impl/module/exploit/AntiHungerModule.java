package dev.realme.ash.impl.module.exploit;

import dev.realme.ash.api.config.Config;
import dev.realme.ash.api.config.setting.BooleanConfig;
import dev.realme.ash.api.event.listener.EventListener;
import dev.realme.ash.api.module.ModuleCategory;
import dev.realme.ash.api.module.ToggleModule;
import dev.realme.ash.impl.event.network.PacketEvent;
import dev.realme.ash.mixin.accessor.AccessorPlayerMoveC2SPacket;
import net.minecraft.network.packet.Packet;
import net.minecraft.network.packet.c2s.play.ClientCommandC2SPacket;
import net.minecraft.network.packet.c2s.play.PlayerMoveC2SPacket;

public class AntiHungerModule
extends ToggleModule {
    Config<Boolean> sprintConfig = new BooleanConfig("Sprint", "Spoofs the sprint state to prevent the server from knowing when the player sprints", true);
    Config<Boolean> groundConfig = new BooleanConfig("Ground", "Spoofs the ground state to prevent the server from knowing when the player jumps", true);

    public AntiHungerModule() {
        super("AntiHunger", "Prevents hunger loss", ModuleCategory.EXPLOITS);
    }

    /*
     * Enabled aggressive block sorting
     */
    @EventListener
    public void onPacketOutbound(PacketEvent.Send event) {
        if (AntiHungerModule.mc.player == null) return;
        if (AntiHungerModule.mc.world == null) return;
        if (AntiHungerModule.mc.player.isFallFlying()) return;
        if (AntiHungerModule.mc.player.isRiding()) return;
        Packet<?> packet = event.getPacket();
        if (packet instanceof PlayerMoveC2SPacket) {
            PlayerMoveC2SPacket packet2 = (PlayerMoveC2SPacket) packet;
            if (this.groundConfig.getValue().booleanValue() && !packet2.isOnGround() && AntiHungerModule.mc.player.fallDistance <= 3.0f) {
                ((AccessorPlayerMoveC2SPacket) packet2).hookSetOnGround(!AntiHungerModule.mc.player.isRiding());
                return;
            }
        }
        if (!((packet = event.getPacket()) instanceof ClientCommandC2SPacket)) return;
        ClientCommandC2SPacket packet3 = (ClientCommandC2SPacket)packet;
        if (!this.sprintConfig.getValue()) return;
        if (packet3.getMode() != ClientCommandC2SPacket.Mode.START_SPRINTING) {
            if (packet3.getMode() != ClientCommandC2SPacket.Mode.STOP_SPRINTING) return;
        }
        event.cancel();
    }
}
