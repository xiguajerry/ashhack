package dev.realme.ash.impl.module.exploit;

import dev.realme.ash.api.config.Config;
import dev.realme.ash.api.config.setting.BooleanConfig;
import dev.realme.ash.api.event.listener.EventListener;
import dev.realme.ash.api.module.ModuleCategory;
import dev.realme.ash.api.module.ToggleModule;
import dev.realme.ash.impl.event.network.PacketEvent;
import net.minecraft.network.packet.c2s.common.CommonPongC2SPacket;
import net.minecraft.network.packet.c2s.common.KeepAliveC2SPacket;
import net.minecraft.network.packet.c2s.play.ClickSlotC2SPacket;
import net.minecraft.network.packet.c2s.play.CraftRequestC2SPacket;
import net.minecraft.network.packet.c2s.play.CreativeInventoryActionC2SPacket;
import net.minecraft.network.packet.c2s.play.HandSwingC2SPacket;
import net.minecraft.network.packet.c2s.play.PickFromInventoryC2SPacket;
import net.minecraft.network.packet.c2s.play.PlayerInputC2SPacket;
import net.minecraft.network.packet.c2s.play.PlayerInteractBlockC2SPacket;
import net.minecraft.network.packet.c2s.play.PlayerInteractEntityC2SPacket;
import net.minecraft.network.packet.c2s.play.PlayerInteractItemC2SPacket;
import net.minecraft.network.packet.c2s.play.PlayerMoveC2SPacket;
import net.minecraft.network.packet.c2s.play.TeleportConfirmC2SPacket;
import net.minecraft.network.packet.c2s.play.UpdateSelectedSlotC2SPacket;

public class PacketCancelerModule
extends ToggleModule {
    final Config<Boolean> playerMoveConfig = new BooleanConfig("PlayerMove", "Cancels the PlayerMoveC2SPacket packet", false);
    final Config<Boolean> playerInputConfig = new BooleanConfig("PlayerInput", "Cancels the PlayerInputC2SPacket packet", false);
    final Config<Boolean> playerInteractBlockConfig = new BooleanConfig("PlayerInteractBlock", "Cancels the PlayerInteractBlockC2SPacket packet", false);
    final Config<Boolean> playerInteractEntityConfig = new BooleanConfig("PlayerInteractEntity", "Cancels the PlayerInteractEntityC2SPacket packet", false);
    final Config<Boolean> playerInteractItemConfig = new BooleanConfig("PlayerInteractItem", "Cancels the PlayerInteractItemC2SPacket packet", false);
    final Config<Boolean> craftRequestConfig = new BooleanConfig("CraftRequest", "Cancels the CraftRequestSlotC2SPacket packet", false);
    final Config<Boolean> updateSelectedSlotConfig = new BooleanConfig("UpdateSelectedSlot", "Cancels the UpdateSelectedSlotC2SPacket packet", false);
    final Config<Boolean> clickSlotConfig = new BooleanConfig("ClickSlot", "Cancels the ClickSlotC2SPacket packet", false);
    final Config<Boolean> pickFromInventoryConfig = new BooleanConfig("PickFromInventory", "Cancels the PickFromInventoryC2SPacket packet", false);
    final Config<Boolean> creativeInventoryActionConfig = new BooleanConfig("CreativeInventoryAction", "Cancels the CreativeInventoryActionC2SPacket packet", false);
    final Config<Boolean> handSwingConfig = new BooleanConfig("HandSwing", "Cancels the HandSwingC2SPacket packet", false);
    final Config<Boolean> teleportConfirmConfig = new BooleanConfig("TeleportConfirm", "Cancels the TeleportConfirmC2SPacket packet", false);
    final Config<Boolean> keepAliveConfig = new BooleanConfig("KeepAlive", "Cancels the KeepAliveC2SPacket packet", false);
    final Config<Boolean> commonPongConfig = new BooleanConfig("CommonPong", "Cancels the CommonPongC2SPacket packet", false);

    public PacketCancelerModule() {
        super("PacketCanceler", "Cancels packets when sending to server", ModuleCategory.EXPLOITS);
    }

    @EventListener
    public void onPacketOutbound(PacketEvent.Send event) {
        if (PacketCancelerModule.nullCheck()) {
            return;
        }
        if (event.getPacket() instanceof PlayerMoveC2SPacket && this.playerMoveConfig.getValue()) {
            event.cancel();
        } else if (event.getPacket() instanceof PlayerInputC2SPacket && this.playerInputConfig.getValue()) {
            event.cancel();
        } else if (event.getPacket() instanceof PlayerInteractBlockC2SPacket && this.playerInteractBlockConfig.getValue()) {
            event.cancel();
        } else if (event.getPacket() instanceof PlayerInteractEntityC2SPacket && this.playerInteractEntityConfig.getValue()) {
            event.cancel();
        } else if (event.getPacket() instanceof PlayerInteractItemC2SPacket && this.playerInteractItemConfig.getValue()) {
            event.cancel();
        } else if (event.getPacket() instanceof CraftRequestC2SPacket && this.craftRequestConfig.getValue()) {
            event.cancel();
        } else if (event.getPacket() instanceof UpdateSelectedSlotC2SPacket && this.updateSelectedSlotConfig.getValue()) {
            event.cancel();
        } else if (event.getPacket() instanceof ClickSlotC2SPacket && this.clickSlotConfig.getValue()) {
            event.cancel();
        } else if (event.getPacket() instanceof PickFromInventoryC2SPacket && this.pickFromInventoryConfig.getValue()) {
            event.cancel();
        } else if (event.getPacket() instanceof CreativeInventoryActionC2SPacket && this.creativeInventoryActionConfig.getValue()) {
            event.cancel();
        } else if (event.getPacket() instanceof HandSwingC2SPacket && this.handSwingConfig.getValue()) {
            event.cancel();
        } else if (event.getPacket() instanceof TeleportConfirmC2SPacket && this.teleportConfirmConfig.getValue()) {
            event.cancel();
        } else if (event.getPacket() instanceof KeepAliveC2SPacket && this.keepAliveConfig.getValue()) {
            event.cancel();
        } else if (event.getPacket() instanceof CommonPongC2SPacket && this.commonPongConfig.getValue()) {
            event.cancel();
        }
    }
}
