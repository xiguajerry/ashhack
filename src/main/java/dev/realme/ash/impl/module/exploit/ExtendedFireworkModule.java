package dev.realme.ash.impl.module.exploit;

import dev.realme.ash.api.event.listener.EventListener;
import dev.realme.ash.api.module.ModuleCategory;
import dev.realme.ash.api.module.ToggleModule;
import dev.realme.ash.impl.event.TickEvent;
import dev.realme.ash.impl.event.entity.projectile.RemoveFireworkEvent;
import dev.realme.ash.impl.event.network.PacketEvent;
import dev.realme.ash.init.Managers;
import dev.realme.ash.mixin.accessor.AccessorFireworkRocketEntity;
import dev.realme.ash.util.math.timer.CacheTimer;
import dev.realme.ash.util.math.timer.Timer;
import java.util.ArrayList;
import java.util.List;

import it.unimi.dsi.fastutil.ints.IntListIterator;
import net.minecraft.entity.projectile.FireworkRocketEntity;
import net.minecraft.network.packet.Packet;
import net.minecraft.network.packet.c2s.common.CommonPongC2SPacket;
import net.minecraft.network.packet.s2c.play.EntitiesDestroyS2CPacket;
import net.minecraft.network.packet.s2c.play.PlayerPositionLookS2CPacket;

public class ExtendedFireworkModule
extends ToggleModule {
    private final List<CommonPongC2SPacket> packetList = new ArrayList<CommonPongC2SPacket>();
    private boolean extendFirework;
    private final Timer extendFireworkTimer = new CacheTimer();
    private FireworkRocketEntity firework;

    public ExtendedFireworkModule() {
        super("ExtendedFirework", "Extends firework boost duration", ModuleCategory.EXPLOITS);
    }

    @Override
    public void onDisable() {
        if (this.firework != null) {
            ((AccessorFireworkRocketEntity) this.firework).hookExplodeAndRemove();
        }
        this.firework = null;
        this.extendFirework = false;
        for (CommonPongC2SPacket packet : this.packetList) {
            Managers.NETWORK.sendPacket(packet);
        }
        this.packetList.clear();
    }

    @EventListener
    public void onRemoveFirework(RemoveFireworkEvent event) {
        if (ExtendedFireworkModule.mc.player == null) {
            return;
        }
        if (ExtendedFireworkModule.mc.player.isFallFlying() && this.firework != event.getRocketEntity() && ((AccessorFireworkRocketEntity) event.getRocketEntity()).hookWasShotByEntity() && ((AccessorFireworkRocketEntity) event.getRocketEntity()).getShooter() == ExtendedFireworkModule.mc.player) {
            this.extendFirework = true;
            event.cancel();
            this.firework = event.getRocketEntity();
            this.extendFireworkTimer.reset();
        }
    }

    @EventListener
    public void onTick(TickEvent event) {
        if (!this.extendFirework) {
            return;
        }
        if (!ExtendedFireworkModule.mc.player.isFallFlying() || ExtendedFireworkModule.mc.player.isOnGround() || this.extendFireworkTimer.passed(50000)) {
            this.extendFirework = false;
            if (this.firework != null) {
                ((AccessorFireworkRocketEntity) this.firework).hookExplodeAndRemove();
                this.firework = null;
            }
            for (CommonPongC2SPacket packet : this.packetList) {
                Managers.NETWORK.sendPacket(packet);
            }
            this.packetList.clear();
        }
    }

    @EventListener
    public void onPacketOutbound(PacketEvent.Send event) {
        if (ExtendedFireworkModule.mc.player == null || ExtendedFireworkModule.mc.world == null) {
            return;
        }
        Packet<?> packet = event.getPacket();
        if (packet instanceof CommonPongC2SPacket packet2) {
            if (this.extendFirework && ExtendedFireworkModule.mc.player.isFallFlying()) {
                event.cancel();
                this.packetList.add(packet2);
            }
        }
    }

    @EventListener
    public void onPacketInbound(PacketEvent.Receive event) {
        Object packet;
        if (ExtendedFireworkModule.mc.player == null || ExtendedFireworkModule.mc.world == null || !ExtendedFireworkModule.mc.player.isFallFlying() || !this.extendFirework) {
            return;
        }
        Object object = event.getPacket();
        if (object instanceof EntitiesDestroyS2CPacket) {
            packet = object;
            if (this.firework != null) {
                object = ((EntitiesDestroyS2CPacket)packet).getEntityIds().iterator();
                while (((IntListIterator) object).hasNext()) {
                    int id = ((IntListIterator) object).next();
                    if (id != this.firework.getId()) continue;
                    event.cancel();
                    return;
                }
            }
        }
        if ((object = event.getPacket()) instanceof PlayerPositionLookS2CPacket) {
            packet = object;
            this.extendFirework = false;
            if (this.firework != null) {
                ((AccessorFireworkRocketEntity) this.firework).hookExplodeAndRemove();
                this.firework = null;
            }
            for (CommonPongC2SPacket p : this.packetList) {
                Managers.NETWORK.sendPacket(p);
            }
            this.packetList.clear();
        }
    }

    public boolean isExtendingFirework() {
        return this.extendFirework;
    }
}
