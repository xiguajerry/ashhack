package dev.realme.ash.init;

import dev.realme.ash.AshMod;
import dev.realme.ash.api.module.Module;
import dev.realme.ash.api.module.ToggleModule;
import dev.realme.ash.impl.module.client.BaritoneModule;
import dev.realme.ash.impl.module.client.CapesModule;
import dev.realme.ash.impl.module.client.ClickGuiModule;
import dev.realme.ash.impl.module.client.ClientSettingModule;
import dev.realme.ash.impl.module.client.CombatSettingModule;
import dev.realme.ash.impl.module.client.HUDModule;
import dev.realme.ash.impl.module.client.ServerModule;
import dev.realme.ash.impl.module.combat.AuraModule;
import dev.realme.ash.impl.module.combat.AutoAnchorModule;
import dev.realme.ash.impl.module.combat.AutoArmorModule;
import dev.realme.ash.impl.module.combat.AutoBowReleaseModule;
import dev.realme.ash.impl.module.combat.AutoCrystalModule;
import dev.realme.ash.impl.module.combat.AutoLogModule;
import dev.realme.ash.impl.module.combat.AutoMineModule;
import dev.realme.ash.impl.module.combat.AutoPotModule;
import dev.realme.ash.impl.module.combat.AutoTotemModule;
import dev.realme.ash.impl.module.combat.AutoWebModule;
import dev.realme.ash.impl.module.combat.AutoXPModule;
import dev.realme.ash.impl.module.combat.BowAimModule;
import dev.realme.ash.impl.module.combat.BurrowModule;
import dev.realme.ash.impl.module.combat.CevBreakerModule;
import dev.realme.ash.impl.module.combat.ClickCrystalModule;
import dev.realme.ash.impl.module.combat.CriticalsModule;
import dev.realme.ash.impl.module.combat.FlattenModule;
import dev.realme.ash.impl.module.combat.HeadTrapModule;
import dev.realme.ash.impl.module.combat.HolePushModule;
import dev.realme.ash.impl.module.combat.OffhandModule;
import dev.realme.ash.impl.module.combat.ReplenishModule;
import dev.realme.ash.impl.module.combat.SelfBounceModule;
import dev.realme.ash.impl.module.combat.SelfBowModule;
import dev.realme.ash.impl.module.combat.SurroundModule;
import dev.realme.ash.impl.module.combat.TriggerModule;
import dev.realme.ash.impl.module.exploit.AntiHungerModule;
import dev.realme.ash.impl.module.exploit.ChorusControlModule;
import dev.realme.ash.impl.module.exploit.ClientSpoofModule;
import dev.realme.ash.impl.module.exploit.CrasherModule;
import dev.realme.ash.impl.module.exploit.DisablerModule;
import dev.realme.ash.impl.module.exploit.ExtendedFireworkModule;
import dev.realme.ash.impl.module.exploit.FakeLatencyModule;
import dev.realme.ash.impl.module.exploit.FastLatencyModule;
import dev.realme.ash.impl.module.exploit.FastProjectileModule;
import dev.realme.ash.impl.module.exploit.PacketCancelerModule;
import dev.realme.ash.impl.module.exploit.PacketFlyModule;
import dev.realme.ash.impl.module.exploit.PhaseModule;
import dev.realme.ash.impl.module.exploit.PortalGodModeModule;
import dev.realme.ash.impl.module.exploit.ReachModule;
import dev.realme.ash.impl.module.misc.AntiAimModule;
import dev.realme.ash.impl.module.misc.AntiSpamModule;
import dev.realme.ash.impl.module.misc.AutoAcceptModule;
import dev.realme.ash.impl.module.misc.AutoEatModule;
import dev.realme.ash.impl.module.misc.AutoFishModule;
import dev.realme.ash.impl.module.misc.AutoReconnectModule;
import dev.realme.ash.impl.module.misc.AutoRespawnModule;
import dev.realme.ash.impl.module.misc.AutoTauntModule;
import dev.realme.ash.impl.module.misc.BeaconSelectorModule;
import dev.realme.ash.impl.module.misc.ChatNotifierModule;
import dev.realme.ash.impl.module.misc.ChestStealerModule;
import dev.realme.ash.impl.module.misc.ChestSwapModule;
import dev.realme.ash.impl.module.misc.FakePlayerModule;
import dev.realme.ash.impl.module.misc.InvCleanerModule;
import dev.realme.ash.impl.module.misc.MiddleClickModule;
import dev.realme.ash.impl.module.misc.NoPacketKickModule;
import dev.realme.ash.impl.module.misc.NoSoundLagModule;
import dev.realme.ash.impl.module.misc.NukerModule;
import dev.realme.ash.impl.module.misc.PacketEatModule;
import dev.realme.ash.impl.module.misc.PacketLoggerModule;
import dev.realme.ash.impl.module.misc.SpammerModule;
import dev.realme.ash.impl.module.misc.TimerModule;
import dev.realme.ash.impl.module.misc.TrueDurabilityModule;
import dev.realme.ash.impl.module.misc.UnfocusedFPSModule;
import dev.realme.ash.impl.module.misc.XCarryModule;
import dev.realme.ash.impl.module.movement.AntiLevitationModule;
import dev.realme.ash.impl.module.movement.AntiWebModule;
import dev.realme.ash.impl.module.movement.AutoWalkModule;
import dev.realme.ash.impl.module.movement.BurrowStrafeModule;
import dev.realme.ash.impl.module.movement.ElytraFlyModule;
import dev.realme.ash.impl.module.movement.EntityControlModule;
import dev.realme.ash.impl.module.movement.EntitySpeedModule;
import dev.realme.ash.impl.module.movement.FakeLagModule;
import dev.realme.ash.impl.module.movement.FastFallModule;
import dev.realme.ash.impl.module.movement.FlightModule;
import dev.realme.ash.impl.module.movement.IceSpeedModule;
import dev.realme.ash.impl.module.movement.JesusModule;
import dev.realme.ash.impl.module.movement.LongJumpModule;
import dev.realme.ash.impl.module.movement.NoFallModule;
import dev.realme.ash.impl.module.movement.NoJumpDelayModule;
import dev.realme.ash.impl.module.movement.NoSlowModule;
import dev.realme.ash.impl.module.movement.ParkourModule;
import dev.realme.ash.impl.module.movement.SpeedModule;
import dev.realme.ash.impl.module.movement.SprintModule;
import dev.realme.ash.impl.module.movement.StepModule;
import dev.realme.ash.impl.module.movement.StrafeModule;
import dev.realme.ash.impl.module.movement.TickShiftModule;
import dev.realme.ash.impl.module.movement.TridentFlyModule;
import dev.realme.ash.impl.module.movement.VelocityModule;
import dev.realme.ash.impl.module.movement.YawModule;
import dev.realme.ash.impl.module.render.BlockHighlightModule;
import dev.realme.ash.impl.module.render.BreadcrumbsModule;
import dev.realme.ash.impl.module.render.BreakHighlightModule;
import dev.realme.ash.impl.module.render.ChamsModule;
import dev.realme.ash.impl.module.render.ESPModule;
import dev.realme.ash.impl.module.render.ExtraTabModule;
import dev.realme.ash.impl.module.render.FreecamModule;
import dev.realme.ash.impl.module.render.FullbrightModule;
import dev.realme.ash.impl.module.render.HoleESPModule;
import dev.realme.ash.impl.module.render.NameProtectModule;
import dev.realme.ash.impl.module.render.NametagsModule;
import dev.realme.ash.impl.module.render.NoRenderModule;
import dev.realme.ash.impl.module.render.NoRotateModule;
import dev.realme.ash.impl.module.render.NoWeatherModule;
import dev.realme.ash.impl.module.render.ParticlesModule;
import dev.realme.ash.impl.module.render.PhaseESPModule;
import dev.realme.ash.impl.module.render.PlaceRenderModule;
import dev.realme.ash.impl.module.render.PopChamsModule;
import dev.realme.ash.impl.module.render.SkeletonModule;
import dev.realme.ash.impl.module.render.SkyboxModule;
import dev.realme.ash.impl.module.render.TooltipsModule;
import dev.realme.ash.impl.module.render.TracersModule;
import dev.realme.ash.impl.module.render.TrueSightModule;
import dev.realme.ash.impl.module.render.ViewClipModule;
import dev.realme.ash.impl.module.render.ViewModelModule;
import dev.realme.ash.impl.module.render.WaypointsModule;
import dev.realme.ash.impl.module.world.AntiInteractModule;
import dev.realme.ash.impl.module.world.AutoToolModule;
import dev.realme.ash.impl.module.world.AvoidModule;
import dev.realme.ash.impl.module.world.BlockInteractModule;
import dev.realme.ash.impl.module.world.FastDropModule;
import dev.realme.ash.impl.module.world.FastPlaceModule;
import dev.realme.ash.impl.module.world.MultitaskModule;
import dev.realme.ash.impl.module.world.NoGlitchBlocksModule;
import dev.realme.ash.impl.module.world.PacketDiggingModule;
import dev.realme.ash.impl.module.world.ScaffoldModule;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;

public class Modules {
   public static ServerModule SERVER;
   public static ClickGuiModule CLICK_GUI;
   public static ClientSettingModule CLIENT_SETTING;
   public static HUDModule HUD;
   public static CombatSettingModule COMBAT_SETTING;
   public static BaritoneModule BARITONE;
   public static CapesModule CAPES;
   public static AuraModule AURA;
   public static AutoArmorModule AUTO_ARMOR;
   public static OffhandModule OFFHAND;
   public static AutoBowReleaseModule AUTO_BOW_RELEASE;
   public static AutoCrystalModule AUTO_CRYSTAL;
   public static HeadTrapModule HEAD_TRAP;
   public static AutoLogModule AUTO_LOG;
   public static AutoTotemModule AUTO_TOTEM;
   public static FlattenModule FLATTEN;
   public static SelfBounceModule SELF_BOUNCE;
   public static HolePushModule HOLE_PUSH;
   public static SpammerModule SPAMMER;
   public static AutoWebModule AUTO_WEB;
   public static PacketDiggingModule PACKET_DIGGING;
   public static PacketEatModule PACKET_EAT;
   public static AutoXPModule AUTO_XP;
   public static AutoPotModule AUTO_POT;
   public static ChestStealerModule CHEST_STEALER;
   public static BowAimModule BOW_AIM;
   public static ClickCrystalModule CLICK_CRYSTAL;
   public static CriticalsModule CRITICALS;
   public static CevBreakerModule CEV_BREAKER;
   public static ReplenishModule REPLENISH;
   public static SelfBowModule SELF_BOW;
   public static BurrowModule BURROW;
   public static PopChamsModule POP_CHAMS;
   public static SurroundModule SURROUND;
   public static TriggerModule TRIGGER;
   public static AntiHungerModule ANTI_HUNGER;
   public static ChorusControlModule CHORUS_CONTROL;
   public static ClientSpoofModule CLIENT_SPOOFER;
   public static CrasherModule CRASHER;
   public static DisablerModule DISABLER;
   public static ExtendedFireworkModule EXTENDED_FIREWORK;
   public static FakeLatencyModule FAKE_LATENCY;
   public static FastLatencyModule FAST_LATENCY;
   public static FastProjectileModule FAST_PROJECTILE;
   public static PacketCancelerModule PACKET_CANCELER;
   public static PacketFlyModule PACKET_FLY;
   public static PhaseModule PHASE;
   public static PortalGodModeModule PORTAL_GOD_MODE;
   public static ReachModule REACH;
   public static AntiAimModule ANTI_AIM;
   public static NoPacketKickModule ANTI_BOOK_BAN;
   public static AntiSpamModule ANTI_SPAM;
   public static AutoAcceptModule AUTO_ACCEPT;
   public static AutoEatModule AUTO_EAT;
   public static AutoFishModule AUTO_FISH;
   public static AutoReconnectModule AUTO_RECONNECT;
   public static AutoRespawnModule AUTO_RESPAWN;
   public static BeaconSelectorModule BEACON_SELECTOR;
   public static ChatNotifierModule CHAT_NOTIFIER;
   public static ChestSwapModule CHEST_SWAP;
   public static FakePlayerModule FAKE_PLAYER;
   public static InvCleanerModule INV_CLEANER;
   public static MiddleClickModule MIDDLE_CLICK;
   public static NoPacketKickModule NO_PACKET_KICK;
   public static NoSoundLagModule NO_SOUND_LAG;
   public static PacketLoggerModule PACKET_LOGGER;
   public static TimerModule TIMER;
   public static TrueDurabilityModule TRUE_DURABILITY;
   public static UnfocusedFPSModule UNFOCUSED_FPS;
   public static XCarryModule XCARRY;
   public static AntiLevitationModule ANTI_LEVITATION;
   public static BurrowStrafeModule BURROW_STRAFE;
   public static AutoWalkModule AUTO_WALK;
   public static ElytraFlyModule ELYTRA_FLY;
   public static EntityControlModule ENTITY_CONTROL;
   public static EntitySpeedModule ENTITY_SPEED;
   public static FakeLagModule FAKE_LAG;
   public static FastFallModule FAST_FALL;
   public static FlightModule FLIGHT;
   public static IceSpeedModule ICE_SPEED;
   public static JesusModule JESUS;
   public static LongJumpModule LONG_JUMP;
   public static NoFallModule NO_FALL;
   public static NoJumpDelayModule NO_JUMP_DELAY;
   public static NoSlowModule NO_SLOW;
   public static ParkourModule PARKOUR;
   public static SpeedModule SPEED;
   public static StrafeModule STRAFE;
   public static SprintModule SPRINT;
   public static StepModule STEP;
   public static TickShiftModule TICK_SHIFT;
   public static TridentFlyModule TRIDENT_FLY;
   public static VelocityModule VELOCITY;
   public static YawModule YAW;
   public static BlockHighlightModule BLOCK_HIGHLIGHT;
   public static BreadcrumbsModule BREADCRUMBS;
   public static BreakHighlightModule BREAK_HIGHLIGHT;
   public static ChamsModule CHAMS;
   public static ESPModule ESP;
   public static ExtraTabModule EXTRA_TAB;
   public static FreecamModule FREECAM;
   public static FullbrightModule FULLBRIGHT;
   public static NameProtectModule NAME_PROTECT;
   public static HoleESPModule HOLE_ESP;
   public static NametagsModule NAMETAGS;
   public static PlaceRenderModule PLACE_RENDER;
   public static NoRenderModule NO_RENDER;
   public static NoRotateModule NO_ROTATE;
   public static NoWeatherModule NO_WEATHER;
   public static ParticlesModule PARTICLES;
   public static PhaseESPModule PHASE_ESP;
   public static SkeletonModule SKELETON;
   public static NukerModule NUKER;
   public static SkyboxModule SKYBOX;
   public static TooltipsModule TOOLTIPS;
   public static TracersModule TRACERS;
   public static TrueSightModule TRUE_SIGHT;
   public static ViewClipModule VIEW_CLIP;
   public static ViewModelModule VIEW_MODEL;
   public static AntiInteractModule ANTI_INTERACT;
   public static AutoMineModule AUTO_MINE;
   public static AutoToolModule AUTO_TOOL;
   public static AvoidModule AVOID;
   public static BlockInteractModule BLOCK_INTERACT;
   public static AutoAnchorModule AUTO_ANCHOR;
   public static FastDropModule FAST_DROP;
   public static FastPlaceModule FAST_PLACE;
   public static MultitaskModule MULTITASK;
   public static NoGlitchBlocksModule NO_GLITCH_BLOCKS;
   public static ScaffoldModule SCAFFOLD;
   public static AutoTauntModule AUTO_TAUNT;
   public static AntiWebModule ANTI_WEB;
   public static WaypointsModule WAYPOINTS;
   private static boolean initialized;
   private static Set CACHE;

   private static Module getRegisteredModule(String id) {
      Module registered = Managers.MODULE.getModule(id);
      if (CACHE.add(registered)) {
         return registered;
      } else {
         throw new IllegalStateException("Invalid module requested: " + id);
      }
   }

   public static void init() {
      if (Managers.isInitialized()) {
         CACHE = new HashSet();
         CLICK_GUI = (ClickGuiModule)getRegisteredModule("clickgui-module");
         CLIENT_SETTING = (ClientSettingModule)getRegisteredModule("clientsetting-module");
         HUD = (HUDModule)getRegisteredModule("hud-module");
         COMBAT_SETTING = (CombatSettingModule)getRegisteredModule("combatsetting-module");
         SERVER = (ServerModule)getRegisteredModule("server-module");
         if (AshMod.isBaritonePresent()) {
            BARITONE = (BaritoneModule)getRegisteredModule("baritone-module");
         }

         CAPES = (CapesModule)getRegisteredModule("capes-module");
         ANTI_WEB = (AntiWebModule)getRegisteredModule("antiweb-module");
         NUKER = (NukerModule)getRegisteredModule("nuker-module");
         AURA = (AuraModule)getRegisteredModule("aura-module");
         AUTO_ANCHOR = (AutoAnchorModule)getRegisteredModule("autoanchor-module");
         AUTO_ARMOR = (AutoArmorModule)getRegisteredModule("autoarmor-module");
         AUTO_BOW_RELEASE = (AutoBowReleaseModule)getRegisteredModule("autobowrelease-module");
         OFFHAND = (OffhandModule)getRegisteredModule("offhand-module");
         AUTO_CRYSTAL = (AutoCrystalModule)getRegisteredModule("autocrystal-module");
         AUTO_LOG = (AutoLogModule)getRegisteredModule("autolog-module");
         AUTO_TOTEM = (AutoTotemModule)getRegisteredModule("autototem-module");
         FLATTEN = (FlattenModule)getRegisteredModule("flatten-module");
         SELF_BOUNCE = (SelfBounceModule)getRegisteredModule("selfbounce-module");
         HEAD_TRAP = (HeadTrapModule)getRegisteredModule("headtrap-module");
         AUTO_WEB = (AutoWebModule)getRegisteredModule("autoweb-module");
         PACKET_DIGGING = (PacketDiggingModule)getRegisteredModule("packetdigging-module");
         PACKET_EAT = (PacketEatModule)getRegisteredModule("packeteat-module");
         AUTO_TAUNT = (AutoTauntModule)getRegisteredModule("autotaunt-module");
         AUTO_XP = (AutoXPModule)getRegisteredModule("autoxp-module");
         AUTO_POT = (AutoPotModule)getRegisteredModule("autopot-module");
         POP_CHAMS = (PopChamsModule)getRegisteredModule("popchams-module");
         BOW_AIM = (BowAimModule)getRegisteredModule("bowaim-module");
         CLICK_CRYSTAL = (ClickCrystalModule)getRegisteredModule("clickcrystal-module");
         CRITICALS = (CriticalsModule)getRegisteredModule("criticals-module");
         SPAMMER = (SpammerModule)getRegisteredModule("spammer-module");
         HOLE_PUSH = (HolePushModule)getRegisteredModule("holepush-module");
         CEV_BREAKER = (CevBreakerModule)getRegisteredModule("cevbreaker-module");
         REPLENISH = (ReplenishModule)getRegisteredModule("replenish-module");
         SELF_BOW = (SelfBowModule)getRegisteredModule("selfbow-module");
         BURROW = (BurrowModule)getRegisteredModule("burrow-module");
         SURROUND = (SurroundModule)getRegisteredModule("surround-module");
         TRIGGER = (TriggerModule)getRegisteredModule("trigger-module");
         ANTI_HUNGER = (AntiHungerModule)getRegisteredModule("antihunger-module");
         CHORUS_CONTROL = (ChorusControlModule)getRegisteredModule("choruscontrol-module");
         CLIENT_SPOOFER = (ClientSpoofModule)getRegisteredModule("clientspoof-module");
         CRASHER = (CrasherModule)getRegisteredModule("crasher-module");
         DISABLER = (DisablerModule)getRegisteredModule("disabler-module");
         EXTENDED_FIREWORK = (ExtendedFireworkModule)getRegisteredModule("extendedfirework-module");
         FAKE_LATENCY = (FakeLatencyModule)getRegisteredModule("fakelatency-module");
         FAST_LATENCY = (FastLatencyModule)getRegisteredModule("fastlatency-module");
         FAST_PROJECTILE = (FastProjectileModule)getRegisteredModule("fastprojectile-module");
         PACKET_CANCELER = (PacketCancelerModule)getRegisteredModule("packetcanceler-module");
         PACKET_FLY = (PacketFlyModule)getRegisteredModule("packetfly-module");
         PHASE = (PhaseModule)getRegisteredModule("phase-module");
         PORTAL_GOD_MODE = (PortalGodModeModule)getRegisteredModule("portalgodmode-module");
         REACH = (ReachModule)getRegisteredModule("reach-module");
         ANTI_AIM = (AntiAimModule)getRegisteredModule("antiaim-module");
         CHEST_STEALER = (ChestStealerModule)getRegisteredModule("cheststealer-module");
         ANTI_SPAM = (AntiSpamModule)getRegisteredModule("antispam-module");
         AUTO_ACCEPT = (AutoAcceptModule)getRegisteredModule("autoaccept-module");
         AUTO_EAT = (AutoEatModule)getRegisteredModule("autoeat-module");
         AUTO_FISH = (AutoFishModule)getRegisteredModule("autofish-module");
         AUTO_RECONNECT = (AutoReconnectModule)getRegisteredModule("autoreconnect-module");
         AUTO_RESPAWN = (AutoRespawnModule)getRegisteredModule("autorespawn-module");
         BEACON_SELECTOR = (BeaconSelectorModule)getRegisteredModule("beaconselector-module");
         CHAT_NOTIFIER = (ChatNotifierModule)getRegisteredModule("chatnotifier-module");
         CHEST_SWAP = (ChestSwapModule)getRegisteredModule("chestswap-module");
         FAKE_PLAYER = (FakePlayerModule)getRegisteredModule("fakeplayer-module");
         INV_CLEANER = (InvCleanerModule)getRegisteredModule("invcleaner-module");
         MIDDLE_CLICK = (MiddleClickModule)getRegisteredModule("middleclick-module");
         NO_PACKET_KICK = (NoPacketKickModule)getRegisteredModule("nopacketkick-module");
         NO_SOUND_LAG = (NoSoundLagModule)getRegisteredModule("nosoundlag-module");
         PACKET_LOGGER = (PacketLoggerModule)getRegisteredModule("packetlogger-module");
         TIMER = (TimerModule)getRegisteredModule("timer-module");
         TRUE_DURABILITY = (TrueDurabilityModule)getRegisteredModule("truedurability-module");
         UNFOCUSED_FPS = (UnfocusedFPSModule)getRegisteredModule("unfocusedfps-module");
         XCARRY = (XCarryModule)getRegisteredModule("xcarry-module");
         ANTI_LEVITATION = (AntiLevitationModule)getRegisteredModule("antilevitation-module");
         AUTO_WALK = (AutoWalkModule)getRegisteredModule("autowalk-module");
         BURROW_STRAFE = (BurrowStrafeModule)getRegisteredModule("burrowstrafe-module");
         ELYTRA_FLY = (ElytraFlyModule)getRegisteredModule("elytrafly-module");
         ENTITY_CONTROL = (EntityControlModule)getRegisteredModule("entitycontrol-module");
         ENTITY_SPEED = (EntitySpeedModule)getRegisteredModule("entityspeed-module");
         FAKE_LAG = (FakeLagModule)getRegisteredModule("fakelag-module");
         FAST_FALL = (FastFallModule)getRegisteredModule("fastfall-module");
         FLIGHT = (FlightModule)getRegisteredModule("flight-module");
         ICE_SPEED = (IceSpeedModule)getRegisteredModule("icespeed-module");
         JESUS = (JesusModule)getRegisteredModule("jesus-module");
         LONG_JUMP = (LongJumpModule)getRegisteredModule("longjump-module");
         NO_FALL = (NoFallModule)getRegisteredModule("nofall-module");
         NO_JUMP_DELAY = (NoJumpDelayModule)getRegisteredModule("nojumpdelay-module");
         NO_SLOW = (NoSlowModule)getRegisteredModule("noslow-module");
         PARKOUR = (ParkourModule)getRegisteredModule("parkour-module");
         SPEED = (SpeedModule)getRegisteredModule("speed-module");
         STRAFE = (StrafeModule)getRegisteredModule("strafe-module");
         SPRINT = (SprintModule)getRegisteredModule("sprint-module");
         STEP = (StepModule)getRegisteredModule("step-module");
         TICK_SHIFT = (TickShiftModule)getRegisteredModule("tickshift-module");
         TRIDENT_FLY = (TridentFlyModule)getRegisteredModule("tridentfly-module");
         VELOCITY = (VelocityModule)getRegisteredModule("velocity-module");
         YAW = (YawModule)getRegisteredModule("yaw-module");
         BLOCK_HIGHLIGHT = (BlockHighlightModule)getRegisteredModule("blockhighlight-module");
         BREAK_HIGHLIGHT = (BreakHighlightModule)getRegisteredModule("breakhighlight-module");
         CHAMS = (ChamsModule)getRegisteredModule("chams-module");
         ESP = (ESPModule)getRegisteredModule("esp-module");
         EXTRA_TAB = (ExtraTabModule)getRegisteredModule("extratab-module");
         FREECAM = (FreecamModule)getRegisteredModule("freecam-module");
         FULLBRIGHT = (FullbrightModule)getRegisteredModule("fullbright-module");
         HOLE_ESP = (HoleESPModule)getRegisteredModule("holeesp-module");
         NAME_PROTECT = (NameProtectModule)getRegisteredModule("nameprotect-module");
         NAMETAGS = (NametagsModule)getRegisteredModule("nametags-module");
         NO_RENDER = (NoRenderModule)getRegisteredModule("norender-module");
         NO_ROTATE = (NoRotateModule)getRegisteredModule("norotate-module");
         NO_WEATHER = (NoWeatherModule)getRegisteredModule("noweather-module");
         PARTICLES = (ParticlesModule)getRegisteredModule("particles-module");
         PHASE_ESP = (PhaseESPModule)getRegisteredModule("phaseesp-module");
         SKELETON = (SkeletonModule)getRegisteredModule("skeleton-module");
         SKYBOX = (SkyboxModule)getRegisteredModule("skybox-module");
         TOOLTIPS = (TooltipsModule)getRegisteredModule("tooltips-module");
         TRACERS = (TracersModule)getRegisteredModule("tracers-module");
         TRUE_SIGHT = (TrueSightModule)getRegisteredModule("truesight-module");
         VIEW_CLIP = (ViewClipModule)getRegisteredModule("viewclip-module");
         VIEW_MODEL = (ViewModelModule)getRegisteredModule("viewmodel-module");
         WAYPOINTS = (WaypointsModule)getRegisteredModule("waypoints-module");
         ANTI_INTERACT = (AntiInteractModule)getRegisteredModule("antiinteract-module");
         AUTO_MINE = (AutoMineModule)getRegisteredModule("automine-module");
         AUTO_TOOL = (AutoToolModule)getRegisteredModule("autotool-module");
         AVOID = (AvoidModule)getRegisteredModule("avoid-module");
         BLOCK_INTERACT = (BlockInteractModule)getRegisteredModule("blockinteract-module");
         FAST_DROP = (FastDropModule)getRegisteredModule("fastdrop-module");
         FAST_PLACE = (FastPlaceModule)getRegisteredModule("fastplace-module");
         MULTITASK = (MultitaskModule)getRegisteredModule("multitask-module");
         NO_GLITCH_BLOCKS = (NoGlitchBlocksModule)getRegisteredModule("noglitchblocks-module");
         PLACE_RENDER = (PlaceRenderModule)getRegisteredModule("placerender-module");
         SCAFFOLD = (ScaffoldModule)getRegisteredModule("scaffold-module");
         initialized = true;
         Iterator var0 = CACHE.iterator();

         while(var0.hasNext()) {
            Module module = (Module)var0.next();
            if (module != null) {
               module.reflectConfigs();
               if (module instanceof ToggleModule) {
                  ToggleModule t = (ToggleModule)module;
                  Managers.MACRO.register(t.getKeybinding());
               }
            }
         }

         CACHE.clear();
      } else {
         throw new RuntimeException("Accessed modules before managers finished initializing!");
      }
   }

   public static boolean isInitialized() {
      return initialized;
   }
}
